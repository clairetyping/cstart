/*Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Note: The returned array must be malloced, assume caller calls free().
 */

/*reminder:
 1.read carefully of the question it request to malloc the return arrey, only dynamic arrey can be malloc and this kind of 
 arrey must to be a pointer.
 2.pay attention the highest limit number i and j go to and think about why
 3.break can only jump out of one cycle so pay attetion where to put the break.
 */
 
int* twoSum(int* nums, int numsSize, int target) {
    int i,j;
    int flag = 0;
    int* p = (int*)malloc(sizeof(int)*2); 
    for(i = 0; i < numsSize - 1; i++)
    {
        for(j = i + 1; j < numsSize; j++)
        {
             if (nums[i] + nums[j] == target){
                 p[0] = i;
                 p[1] = j;
                 flag = 1;
                 break;
             }
        }
        if(flag == 1)
            break; //break two times so it can jump out 
           
    }
    return p;
}
